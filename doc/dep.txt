
//继承
dag{
    Camera -> FilamentAPI
    BufferObject -> FilamentAPI
    ColorGrading -> FilamentAPI
    DebugRegistry -> FilamentAPI
    Fence -> FilamentAPI
    IndexBuffer -> FilamentAPI
    IndirectLight -> FilamentAPI
    LightManager -> FilamentAPI
    Material -> FilamentAPI
    MaterialInstance -> FilamentAPI
    MorphTargetBuffer -> FilamentAPI
    RenderableManager -> FilamentAPI
    Renderer -> FilamentAPI
    RenderTarget -> FilamentAPI
    Scene -> FilamentAPI
    SkinningBuffer -> FilamentAPI
    Skybox -> FilamentAPI
    Stream -> FilamentAPI
    SwapChain -> FilamentAPI
    Texture -> FilamentAPI
    TransformManager -> FilamentAPI
    VertexBuffer -> FilamentAPI
    View -> FilamentAPI
    CameraManager -> FilamentAPI
}

// has a builder
dag{
    BufferObject
    ColorGrading
    IndexBuffer
    IndirectLight
    LightManager
    Material
    MorphTargetBuffer
    RenderableManager
    RenderTarget
    SkinningBuffer
    Skybox
    Stream
    Texture
    VertexBuffer
    FrameGraph
}

//读源码的依赖顺序
dag{
    Skybox -> RenderableManager
    RenderableManager -> EntityInstance
    RenderableManager -> Entity
    RenderableManager -> FRenderableManager
    FRenderableManager -> SingleInstanceComponentManager
    SingleInstanceComponentManager -> EntityManager
    SingleInstanceComponentManager -> StructureOfArrays
    EntityManager -> Entity
    RenderableManager -> BuilderBase
}


Entity 是一个实体对象 ， 它的生命周期由 全局线程安全的单例对象 EntityManager 管理。
一个Entity 有一个ID, ID是 EntityManager 创建的时候分配的。 
EntityManager 可分配的Entity数量是有最大数量上限的，131072 (1 << 17)。
EntityManager 分配的Entity 数量超过了上限的时候 创建出来的Entity对象就是不合法的。
EntityManager 可以检查 Entity 对象的合法性。
EntityManager 的ID分配算法暂时没有看懂。
Entity的哈希值就是它的ID。
如果一个 Entity 没有回收，Entity就不可能再分配一个具有相同ID的Entity出来，所以如果两个Entity对象的ID,HASH相同，
那么其实这两个Entity对象 其实就是同一个Entity。一个Entity不能回收两次。

EntityInstance 和 Entity 什么关系？它们都是一个ID



StructureOfArrays 就是一个范型数据结构，可以表示任意的结构体里面有多个各种类型，但是大小相同的数组。
比如:
struct DemoDatas{
    int64_t         IDS[10];
    std::string     Names[10];
    float           Values[10];
} demoDatas;

就可以表示为
StructureOfArrays<int64_t, std::string, float> demoDatas(10);
并且可以使用迭代器访问。

