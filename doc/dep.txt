
//继承
dag{
    Camera -> FilamentAPI
    BufferObject -> FilamentAPI
    ColorGrading -> FilamentAPI
    DebugRegistry -> FilamentAPI
    Fence -> FilamentAPI
    IndexBuffer -> FilamentAPI
    IndirectLight -> FilamentAPI
    LightManager -> FilamentAPI
    Material -> FilamentAPI
    MaterialInstance -> FilamentAPI
    MorphTargetBuffer -> FilamentAPI
    RenderableManager -> FilamentAPI
    Renderer -> FilamentAPI
    RenderTarget -> FilamentAPI
    Scene -> FilamentAPI
    SkinningBuffer -> FilamentAPI
    Skybox -> FilamentAPI
    Stream -> FilamentAPI
    SwapChain -> FilamentAPI
    Texture -> FilamentAPI
    TransformManager -> FilamentAPI
    VertexBuffer -> FilamentAPI
    View -> FilamentAPI
    CameraManager -> FilamentAPI
}

// has a builder
dag{
    BufferObject
    ColorGrading
    IndexBuffer
    IndirectLight
    LightManager
    Material
    MorphTargetBuffer
    RenderableManager
    RenderTarget
    SkinningBuffer
    Skybox
    Stream
    Texture
    VertexBuffer
    FrameGraph
}

//读源码的依赖顺序
dag{
    Skybox -> FilamentAPI //Skybox is a FilamentAPI
    Skybox -> Skybox::Builder //Skybox has a Builder
    Skybox::Builder -> BuilderBase<BuilderDetails>  // is

    FSkybox -> Skybox  //FSkybox is a Skybox
    FSkybox -> FMaterial 
    FSkybox -> FMaterialInstance
    FSkybox -> MaterialInstance 
    MaterialInstance -> TextureSampler
    Skybox -> Texture
    FSkybox -> RenderableManager  // FSkybox has a RenderableManager
    
    RenderableManager -> EntityInstance
    RenderableManager -> Entity
    RenderableManager -> FRenderableManager
    FRenderableManager -> SingleInstanceComponentManager
    SingleInstanceComponentManager -> EntityManager
    SingleInstanceComponentManager -> StructureOfArrays
    EntityManager -> Entity
    RenderableManager -> BuilderBase


-----------------------------------------------------------------------------------------
内存的分配
    builder::build
    Engine -> FEngine
    FEngine -> HeapAllocatorArena
    FEngine -> ResourceList
    HeapAllocatorArena -> HeapAllocator
    HeapAllocatorArena -> LockingPolicy
    HeapAllocatorArena -> TrackingPolicy
    HeapAllocator -> aligned_alloc
    aligned_alloc -> posix_memalign

    HeapAllocatorArena: 本质上就是一个支持调试，封装了一些功能， 比如直接构造出一个类，比如调试功能
    HeapAllocator: 默认就有内存对齐的分配器

    ResourceList 是一个set的封装
}

---------------------------
如何理解内存对齐
Whereas malloc gives you a chunk of memory that could have any alignment (the only requirement is that it must be aligned for the largest primitive type that the implementation supports), posix_memalign gives you a chunk of memory that is guaranteed to have the requested alignment.

So the result of e.g. posix_memalign(&p, 32, 128) will be a 128-byte chunk of memory whose start address is guaranteed to be a multiple of 32.

This is useful for various low-level operations (such as using SSE instructions, or DMA), that require memory that obeys a particular alignment.

-----------------------------------------------------------------------------------------
Filament 是怎么实现ECS的？

Entity 是一个实体对象 ， 它的生命周期由 全局线程安全的单例对象 EntityManager 管理。
一个Entity 有一个ID, ID是 EntityManager 创建的时候分配的。 
EntityManager 可分配的Entity数量是有最大数量上限的，131072 (1 << 17)。
EntityManager 分配的Entity 数量超过了上限的时候 创建出来的Entity对象就是不合法的。
EntityManager 可以检查 Entity 对象的合法性。
EntityManager 的ID分配算法暂时没有看懂。
Entity的哈希值就是它的ID。
如果一个 Entity 没有回收，Entity就不可能再分配一个具有相同ID的Entity出来，所以如果两个Entity对象的ID,HASH相同，
那么其实这两个Entity对象 其实就是同一个Entity。一个Entity不能回收两次。

EntityInstance 和 Entity 什么关系？它们都是一个ID
StructureOfArrays 就是一个范型数据结构，可以表示任意的结构体里面有多个各种类型，但是大小相同的数组。
比如:
struct DemoDatas{
    int64_t         IDS[10];
    std::string     Names[10];
    float           Values[10];
} demoDatas;

就可以表示为
StructureOfArrays<int64_t, std::string, float> demoDatas(10);
并且可以使用迭代器访问。

SingleInstanceComponentManager

-------------------------------------------------
Filament 的API为什么要这么设计
Builder 构建者模式


 * FilamentAPI is used to define an API in filament.
 * It ensures the class defining the API can't be created, destroyed
 * or copied by the caller.
 所有的接口都继承 FilamentAPI ,这样就可以约束用户的行为

 FilamentAPI 的析构函数 是 protected not-virtual 的， 构造函数是protected 表明FilamentAPI 也就是说该类无法直接被构造和析构函数， 我们无法直接使用该类， 它只能作为基类。
 删除了 new操作符，用户无法new 它
 删除了拷贝和赋值，用户无法把它直接放到容器当中

-----
理解 Filament 的 Builder 模式

1. Filament 的API 对象都继承了FilamentAPI, 所以用户无法直接在栈中创建该对象，也无法直接 new 该对象
   强制使用户只能通过Builder来创建该对象。

2. Filament 的 Engine 内部有各个API对象的 实现类的 的ResourceList
   比如 VertexBuffer 这个API对象， 它的实现类其实是 FVertexBuffer。Engine 中就包含了 ResourceList<FVertexBuffer> 这个资源列表。

3. 用户在创建 VertexBuffer 的时候 首先需要创建 VertexBuffer::Builder。
   然后使用builder对该对象进行必要的属性设置，最后调用build 函数来创建该对象。

4. build 的时候 首先会对 用户设置的参数进行检查，如果设置了不合法的参数就直接报错，
   避免不熟悉的用户创建出来辣鸡对象。
5. build 的的第二步 是调用Engine 的 createVertexBuffer 函数。该函数的参数是该builder。

6. FEngine 的 create函数 会使用该builder作为构造函数的参数 ， 由 HeapAllocator 构造
   FVertexBuffer 对象，并放入 ResourceList<FVertexBuffer> 。
   然后返回构造好的子类对象的指针。

7. 所以每个由Engine管理的API对象 的具体实现类(F开头) 都一定会有一个以builder为参数的构造函数。

8. 这个复杂的Builder模式的优点：
    隐藏了实现细节，用户连成员变量有哪些够不知道。
    ABI 兼容。
    避免了错误的参数导致的bug。
-------------------------------------------------------

FilamentApp
    mScene //全局只有一个场景

Window
    Window 是 FilamentApp 的友元
    创建一个SDL_Window* mWindow
    根据SDL_Window 获取 nativeWindow
    创建FilamentApp 里面的 Engine
    从Engine获取 mBackend
    根据 nativeWindow 创建 mSwapChain，交换链 是 window的成员
    创建 mRenderer ,渲染器也是 window的成员
    创建3个 Camera 并设置camera的曝光

    创建视图，默认情况下只有主视图和UI视图 CView
    创建相机控制器
    给主视图设置相机和相机控制器
    配置相机
    设置相机的朝向
-----------------------------------------------------
可渲染对象
Renderable

可渲染对象是图元（primitives）的集合
每个图元都有自己的几何（geometry）和材质（material）
在一个可渲染对象中的图元共享相同的渲染属性


--------------------------------------------------
Engine

-----------------
Renderer
一个渲染器实例代表一个操作系统窗口。
通常应用程序为每个窗口创建一个渲染器，渲染器为渲染线程生成绘制命令并管理帧延迟。
渲染器从View生成绘制命令，View里面包含场景描述。


-----------------
View
View包含渲染场景所需要的所有状态
